#!/bin/bash

## === Default configuration
CONF_DHCP_BOOT="/pxelinux.0"
CONF_IFACE="eth0"
CONF_IFACE_ADDR="10.5.2.1/24"
DIR_BASE="$(readlink -f `dirname $BASH_SOURCE`/..)"
DIR_TFTPROOT="$DIR_BASE/data/tftproot"
DIR_IMAGES="$DIR_BASE/data/images"
DIR_CONF="$DIR_BASE/conf"
DIR_HOOKS="$DIR_BASE/scripts/hooks"

manage_networking=false
[[ -n "$CONF_IFACE" ]] && [[ -n "$CONF_IFACE_ADDR" ]] && manage_networking=true

## === Colorized logging
loglevel_colors=("37;44" "37;41" "30;42")
log()
{
	local loglevel=$1
	local colorcode="${loglevel_colors[$loglevel]}"
	shift
	echo -e " \x1b[${colorcode}m--[[\x1b[0m $* \x1b[${colorcode}m]]--\x1b[0m"
}

## === Exists if user has no root privileges
root_required()
{
    [[ "$(id -u)" -ne "0" ]] && log 1 "Root privileges required">&2 && exit 1
}

## === Simple atexit hooks system
declare -a atexit_hooks
cleanup()
{
	for hook in "${atexit_hooks[@]}"; do
		$hook
	done
	atexit_hooks=()
	return 0
}

atexit()
{
	atexit_hooks=("$*" "${atexit_hooks[@]}")
}

sigint_trap()
{
	echo -e "\r"
	log 0 "Exiting..."
	cleanup
	exit $?
}

trap cleanup EXIT
trap sigint_trap SIGINT

## === Network handling
net_setup()
{
	log 0 "Setting up networking"
	ifconfig $CONF_IFACE $CONF_IFACE_ADDR up || return $?
	atexit net_cleanup
	return 0
}

net_cleanup()
{
	log 0 "Cleaning up networking"
	ifconfig $CONF_IFACE down || return $?
	return 0
}

## === Images handling
list_images()
{
	ls $DIR_IMAGES
}

image_setup()
{
	image_name=$1
	log 0 "Setting up image $image_name"
	atexit image_cleanup $image_name
    image_path="$DIR_IMAGES/$image_name"
    [[ -x "$DIR_IMAGES/$image_name/hook-precleanup" ]] && source $DIR_IMAGES/$image_name/hook-presetup
    [[ -d "$image_path/overlay" ]] && [[ -d "$image_path/base" ]] && log 0 "Mounting overlayed $image_name image" && mount -t aufs -o br=$image_path/overlay:$image_path/base=ro,xino=$image_path/.aufs.xino none $image_path/rootfs
	mkdir $DIR_TFTPROOT/boot/$image_name
	mount --bind $image_path/rootfs/boot $DIR_TFTPROOT/boot/$image_name
    accessmode="ro"
    [[ -f "$image_path/accessmode" ]] && accessmode="$( cat $image_path/accessmode)"
    echo "$image_path/rootfs *(no_subtree_check,$accessmode,no_root_squash,fsid=0,insecure,sync,crossmnt)" > /etc/exports.d/netboot-$image_name.exports
    [[ -x "$DIR_IMAGES/$image_name/hook-precleanup" ]] && source $DIR_IMAGES/$image_name/hook-postsetup
}

image_cleanup()
{
	image_name=$1
	log 0 "Cleaning up image $image_name"
    #exportfs -v -u 0.0.0.0:$DIR_IMAGES/$image_name/rootfs
    [[ -x "$DIR_IMAGES/$image_name/hook-precleanup" ]] && source $DIR_IMAGES/$image_name/hook-precleanup
    rm /etc/exports.d/netboot-$image_name.exports
	umount $DIR_TFTPROOT/boot/$image_name
	rmdir $DIR_TFTPROOT/boot/$image_name
    [[ -x "$DIR_IMAGES/$image_name/hook-precleanup" ]] && source $DIR_IMAGES/$image_name/hook-postcleanup
}

images_setup()
{
	for image_name in $(list_images); do
		image_setup $image_name || log 1 "Image $image_name setup failed"
	done
    /etc/init.d/nfs-kernel-server restart
}
