#!/bin/bash

## === Default configuration
CONF_DHCP_BOOT="/pxelinux.0"
CONF_IFACE="eth0"
CONF_IFACE_ADDR="10.5.2.1/24"
CONF_IFACE_NAT="eth1"
DIR_BASE="$(readlink -f `dirname $BASH_SOURCE`/..)"
DIR_TFTPROOT="$DIR_BASE/data/tftproot"
DIR_IMAGES="$DIR_BASE/data/images"
DIR_DEVICES="$DIR_BASE/data/devices"
DIR_CONF="$DIR_BASE/conf"
DIR_HOOKS="$DIR_BASE/scripts/hooks"
FSID_BASE=9000
manage_networking=false
[[ -n "$CONF_IFACE" ]] && [[ -n "$CONF_IFACE_ADDR" ]] && manage_networking=true

## === Colorized logging
loglevel_colors=("37;44" "37;41" "30;42")

log()
{
    local loglevel="$1"; shift
    local colorcode="${loglevel_colors[$loglevel]}"
    
    echo -e " \x1b[${colorcode}m--[[\x1b[0m $* \x1b[${colorcode}m]]--\x1b[0m"
}

## === Exists if user has no root privileges
root_required()
{
    [[ "$(id -u)" -ne "0" ]] && log 1 "Root privileges required">&2 && exit 1
}

## === Simple atexit hooks system
declare -a atexit_hooks
cleanup()
{
    for hook in "${atexit_hooks[@]}"; do
        $hook
    done
    atexit_hooks=()
    return 0
}

atexit()
{
    atexit_hooks=("$*" "${atexit_hooks[@]}")
}

sigint_trap()
{
    echo -e "\r"
    log 0 "Exiting..."
    cleanup
    exit $?
}

trap cleanup EXIT
trap sigint_trap SIGINT

## === Network handling
iface_addr()
{
    ifconfig $1 | grep 'inet addr:'| grep -v '127.0.0.1' | cut -d: -f2 | awk '{ print $1 }'
}

net_setup()
{
    log 0 "Setting up networking"
    ifconfig $CONF_IFACE $CONF_IFACE_ADDR up || return $?
    if [[ ! -z "$CONF_IFACE_NAT" ]]; then
        echo 1 > /proc/sys/net/ipv4/ip_forward
        iptables -t nat -A POSTROUTING -o $CONF_IFACE_NAT -j SNAT --to "$(iface_addr $CONF_IFACE_NAT)"
        atexit iptables -t nat -D POSTROUTING -o $CONF_IFACE_NAT -j SNAT --to "$(iface_addr $CONF_IFACE_NAT)"
    fi
    atexit net_cleanup
    return 0
}

net_cleanup()
{
    log 0 "Cleaning up networking"
    ifconfig $CONF_IFACE down || return $?
    return 0
}

## === Images handling
list_images()
{
    ls $DIR_IMAGES
}

image_hook()
{
    local image_name="$1"
    local hook_name="$2"

    if [[ -x "$DIR_IMAGES/$image_name/hook-$hook_name" ]]; then
        source $DIR_IMAGES/$image_name/hook-$hook_name
    fi
}

image_setup()
{
    local image_name="$1"
    local image_path="$DIR_IMAGES/$image_name"
    
    log 0 "Setting up image $image_name"

    image_hook $image_name presetup

    if [[ -d "$image_path/overlay" ]] && [[ -d "$image_path/base" ]]; then 
        log 0 "Mounting overlayed $image_name image"
        mount -t aufs -o br=$image_path/overlay:$image_path/base=ro none $image_path/rootfs
        # FIXME: executed outside of pre/post-cleanup hooks
        atexit umount -l $image_path/rootfs
    fi

    if [[ -d "$image_path/rootfs/boot" ]]; then
        mkdir $DIR_TFTPROOT/boot/$image_name
        mount --bind $image_path/rootfs/boot $DIR_TFTPROOT/boot/$image_name
    fi

    local accessmode="ro"
    [[ -f "$image_path/accessmode" ]] && accessmode="$( cat $image_path/accessmode)"
    echo "$image_path/rootfs *(no_subtree_check,$accessmode,no_root_squash,insecure,crossmnt,async,fsid=$((`ls /etc/exports.d | wc -l`+$FSID_BASE)))" > /etc/exports.d/netboot-$image_name.exports
    
    atexit image_cleanup $image_name

    image_hook $image_name postsetup
    return 0
}

image_cleanup()
{
    local image_name="$1"

    log 0 "Cleaning up image $image_name"
    image_hook $image_name precleanup

    rm /etc/exports.d/netboot-$image_name.exports
    if [[ -d "$DIR_TFTPROOT/boot/$image_name" ]]; then
        umount $DIR_TFTPROOT/boot/$image_name
        rmdir $DIR_TFTPROOT/boot/$image_name
    fi

    image_hook $image_name postcleanup

    return 0
}

images_setup()
{
    # atexit is first-in-last-out
    atexit /etc/init.d/nfs-kernel-server restart

    for image_name in $(list_images); do
        image_setup $image_name || log 1 "Image $image_name setup failed"
    done

    /etc/init.d/nfs-kernel-server restart
}

# === Devices handling
list_devices()
{
    ls $DIR_DEVICES
}

devdb_set()
{
    local devid="$1"; shift
    local key="$1"; shift

    echo "$*" > $DIR_DEVICES/$devid/$key
}

devdb_get()
{
    local devid="$1"; shift
    local key="$1"; shift
    local default_value="$1"; shift
    local keypath="$DIR_DEVICES/$devid/$key"

    if [[ -f "$keypath" ]]; then
        cat $keypath
    else
        echo $default_value
    fi
}
